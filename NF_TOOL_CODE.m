% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 23-Oct-2022 14:03:32
%
% This script assumes these variables are defined:
%
%   fall1 - input data.
%   summer2 - target data.

x = summer1';
t = summer2';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
hiddenLayerSize = 10;
net = fitnet(hiddenLayerSize,trainFcn);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
for j=1:10
[net,tr] = train(net,x,t);
j = j+1
end

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
MAE=mae(e)
MSE=mse(net,t,y)
MAPE= mean((abs(y-t))./t)*100


% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)
fall_time=datetime(2004,11,1,1,0,0):hours(1):datetime(2005,1,31,24,0,0);

winter_time=datetime(2005,2,1,1,0,0):hours(1):datetime(2005,4,30,24,0,0);

spring_time=datetime(2005,5,1,1,0,0):hours(1):datetime(2005,7,31,24,0,0);

summer_time=datetime(2005,8,1,1,0,0):hours(1):datetime(2005,10,31,24,0,0);

time=summer_time;
plot(time(24:48),summer2(24:48))
hold on;
plot(time(24:48),y(24:48))
title('Load Consumption of summer 2004 and 2005')
xlabel('Hours')
ylabel('Power Consumption in KW')
hold on
legend('Actual','Predicted')
hold off

